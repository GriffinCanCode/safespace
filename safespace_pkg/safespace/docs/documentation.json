{
  "name": "SafeSpace",
  "version": "current",
  "description": "SafeSpace is a tool that creates isolated testing environments with various safety features, allowing for secure testing and development. It provides robust isolation at multiple levels to ensure test environments don't interfere with your primary system.",
  "sections": [
    {
      "title": "Core Concepts",
      "id": "core-concepts",
      "content": "SafeSpace creates isolated environments for testing and development with configurable levels of isolation, including network isolation, VM isolation, and container-based isolation. These environments can be customized for specific testing scenarios using templates. Each environment is created with secure permissions and proper resource allocation.",
      "subsections": [
        {
          "title": "Isolation Levels",
          "id": "isolation-levels",
          "content": "SafeSpace supports multiple isolation levels with increasing separation from the host system:\n\n- **Filesystem isolation**: Basic isolation at the filesystem level, providing separate directories with secure permissions (0o700) for the environment\n- **Network isolation**: Separate network namespace with controlled access, allowing testing of network behavior without affecting the host system\n- **Container isolation**: Docker/Podman container-based isolation with configurable resource limits, using either Docker or Podman depending on what's available\n- **VM isolation**: Complete isolation using lightweight QEMU/KVM virtual machines running Alpine Linux by default, with configurable resources",
          "navigation": {
            "next": "directory-structure",
            "parent": "core-concepts"
          }
        },
        {
          "title": "Environment Directory Structure",
          "id": "directory-structure",
          "content": "Each SafeSpace environment has the following carefully organized directory structure:\n\n- `cache/`: Cache files for the environment with configurable size limits\n- `logs/`: Log files with automatic rotation and cleanup of old logs\n- `data/`: Data storage for persistent information across environment runs\n- `tmp/`: Temporary files with automatic garbage collection\n- `.env`: Environment variables file that tracks all configuration settings\n- `vm/`: VM-related files including disk images, control scripts, and configuration (if VM mode is enabled)\n- `container/`: Container-related files including scripts for managing containers (if container mode is enabled)",
          "navigation": {
            "previous": "isolation-levels",
            "parent": "core-concepts",
            "next": "resource-management"
          }
        },
        {
          "title": "Resource Management",
          "id": "resource-management",
          "content": "SafeSpace intelligently manages system resources to prevent overallocation:\n\n- **Core Optimization**: Allocates performance and efficiency cores based on workload\n- **Memory Management**: Configurable memory limits for VMs and containers\n- **Disk Space Management**: Monitors available space and provides warnings when below thresholds\n- **Cache Management**: Automatic cache pruning based on configurable size limits and access patterns\n- **Process Isolation**: Ensures processes in the isolated environment don't interfere with the host system",
          "navigation": {
            "previous": "directory-structure",
            "parent": "core-concepts",
            "next": "security-features"
          }
        },
        {
          "title": "Security Features",
          "id": "security-features",
          "content": "SafeSpace implements multiple security measures to protect both the host and environment:\n\n- **Secure Directories**: Creates directories with strict permissions (0o700 on Unix)\n- **Process Isolation**: Prevents processes from accessing resources outside their environment\n- **Resource Limitations**: Configurable limits on CPU, memory, and disk usage\n- **Network Isolation**: Separate network namespace with controlled access\n- **Cleanup Protocols**: Comprehensive cleanup to ensure no resources are left behind\n- **Permission Validation**: Checks for proper permissions before operations",
          "navigation": {
            "previous": "resource-management",
            "parent": "core-concepts",
            "next": "templates"
          }
        }
      ],
      "navigation": {
        "next": "templates"
      }
    },
    {
      "title": "Environment Templates",
      "id": "templates",
      "content": "SafeSpace provides predefined environment templates for common testing scenarios. These templates can be used to quickly set up specific testing environments with various features enabled. All templates inherit from the base EnvironmentTemplate class and override the _configure method to implement specific functionality.",
      "subsections": [
        {
          "title": "Basic Test Template",
          "id": "basic-test",
          "content": "**ID**: `basic`\n**Description**: Basic testing environment with minimal configuration\n\nThis template sets up a simple environment with comprehensive testing capabilities but without additional isolation mechanisms. It's ideal for quick testing when network or VM isolation isn't required.\n\n**Implementation**: Uses the `BasicTestTemplate` class which calls `setup_comprehensive_testing()` to prepare a robust testing environment.",
          "parameters": {},
          "navigation": {
            "parent": "templates",
            "next": "isolated-network"
          }
        },
        {
          "title": "Isolated Network Template",
          "id": "isolated-network",
          "content": "**ID**: `network`\n**Description**: Environment with network isolation for testing network boundaries\n\nThis template sets up an environment with network isolation, creating a separate network namespace with controlled access to the host network. It uses Linux network namespaces to create a completely isolated network environment.\n\n**Implementation**: Uses the `IsolatedNetworkTemplate` class which calls `setup_network_isolation()` to create a separate network namespace, followed by `setup_comprehensive_testing()`.",
          "parameters": {},
          "navigation": {
            "previous": "basic-test",
            "parent": "templates",
            "next": "vm-based"
          }
        },
        {
          "title": "VM-Based Template",
          "id": "vm-based",
          "content": "**ID**: `vm`\n**Description**: Environment with VM support for isolated execution testing\n\nThis template sets up an environment with a virtual machine for complete isolation. The VM is configured with Alpine Linux by default and uses QEMU/KVM for high-performance virtualization. The VM includes networking capabilities and can be accessed via console or network.\n\n**Implementation**: Uses the `VMBasedTemplate` class which configures a `VMConfig` object and calls `setup_vm()` followed by `setup_comprehensive_testing()`.",
          "parameters": {
            "memory": "Memory size for the VM (e.g., '2G') - Controls the amount of RAM allocated to the VM",
            "cpus": "Number of CPUs for the VM - Sets the number of vCPUs available to the VM",
            "disk_size": "Disk size for the VM (e.g., '10G') - Determines the size of the virtual disk",
            "headless": "Whether to run the VM in headless mode (no GUI) - Boolean value, defaults to True"
          },
          "navigation": {
            "previous": "isolated-network",
            "parent": "templates",
            "next": "container-based"
          }
        },
        {
          "title": "Container-Based Template",
          "id": "container-based",
          "content": "**ID**: `container`\n**Description**: Environment with container support for isolated execution testing\n\nThis template sets up an environment with a container (Docker or Podman) for lightweight isolation. It automatically detects which container runtime is available on the system and configures appropriate resource limits. The container can mount the workspace directory for seamless file access.\n\n**Implementation**: Uses the `ContainerBasedTemplate` class which configures a `ContainerConfig` object and calls `setup_container()` followed by `setup_comprehensive_testing()`.",
          "parameters": {
            "image": "Container image to use (e.g., 'alpine:latest') - Specifies the container image",
            "memory": "Memory limit for the container (e.g., '512m') - Sets maximum memory usage",
            "cpus": "CPU limit for the container (e.g., 1.0) - Controls CPU allocation",
            "storage_size": "Storage size for the container (e.g., '5G') - Sets storage limit",
            "network_enabled": "Whether to enable networking - Boolean value, defaults to False",
            "privileged": "Whether to run in privileged mode - Boolean value, defaults to False",
            "mount_workspace": "Whether to mount the workspace directory - Boolean value, defaults to True"
          },
          "navigation": {
            "previous": "vm-based",
            "parent": "templates",
            "next": "comprehensive"
          }
        },
        {
          "title": "Comprehensive Template",
          "id": "comprehensive",
          "content": "**ID**: `comprehensive`\n**Description**: Full-featured environment with network isolation, VM, container, and enhanced testing\n\nThis template sets up a complete environment with all isolation mechanisms and testing features enabled. It provides the highest level of isolation and testing capabilities, combining network isolation, VM, and container technologies together.\n\n**Implementation**: Uses the `ComprehensiveTemplate` class which calls multiple setup methods: `setup_network_isolation()`, `setup_vm()`, `setup_container()`, `setup_comprehensive_testing()`, and `setup_enhanced_environment()`.",
          "parameters": {
            "memory": "Memory size for the VM (e.g., '4G') - Controls the amount of RAM allocated to the VM",
            "cpus": "Number of CPUs for the VM (e.g., 4) - Sets the number of vCPUs available to the VM",
            "disk_size": "Disk size for the VM (e.g., '20G') - Determines the size of the virtual disk",
            "headless": "Whether to run the VM in headless mode - Boolean value, defaults to True",
            "container_image": "Container image to use (e.g., 'alpine:latest') - Specifies the container image",
            "container_memory": "Memory limit for the container (e.g., '1g') - Sets maximum memory usage",
            "container_cpus": "CPU limit for the container (e.g., 2.0) - Controls CPU allocation"
          },
          "navigation": {
            "previous": "container-based",
            "parent": "templates",
            "next": "enhanced-dev"
          }
        },
        {
          "title": "Enhanced Development Template",
          "id": "enhanced-dev",
          "content": "**ID**: `development`\n**Description**: Environment optimized for development with IDE integration and tooling\n\nThis template sets up an environment optimized for development with additional tooling and IDE integration. It includes VS Code settings, Git hooks, and various development tools to provide a comprehensive development experience.\n\n**Implementation**: Uses the `EnhancedDevelopmentTemplate` class which calls `setup_enhanced_environment()` to configure IDE settings, Git hooks, and development tools, followed by `setup_comprehensive_testing()`.",
          "parameters": {},
          "navigation": {
            "previous": "comprehensive",
            "parent": "templates",
            "next": "performance-test"
          }
        },
        {
          "title": "Performance Test Template",
          "id": "performance-test",
          "content": "**ID**: `performance`\n**Description**: Environment configured for performance benchmarking and testing\n\nThis template sets up an environment specifically configured for performance testing and benchmarking. It includes benchmark configuration files and tools for accurate performance measurements.\n\n**Implementation**: Uses the `PerformanceTestTemplate` class which calls `setup_comprehensive_testing()` and creates additional benchmark configuration files in a dedicated `benchmarks` directory. It configures pytest-benchmark with specific settings for iterations, warmup, and output formats.",
          "parameters": {},
          "navigation": {
            "previous": "enhanced-dev",
            "parent": "templates",
            "next": "features"
          }
        }
      ],
      "navigation": {
        "previous": "core-concepts",
        "next": "features"
      }
    },
    {
      "title": "Features",
      "id": "features",
      "content": "SafeSpace provides various features for creating and managing isolated testing environments. These features are implemented through specialized modules that handle different aspects of isolation and environment management.",
      "subsections": [
        {
          "title": "Network Isolation",
          "id": "network-isolation",
          "content": "Network isolation creates a separate network namespace for the environment, providing controlled access to the network. This allows testing network-related code without affecting the host system.\n\n**Usage**: `safespace --network`\n\n**Implementation Details**:\n- Creates a Linux network namespace for isolation\n- Configures virtual interfaces (veth pairs) to connect namespaces\n- Establishes NAT routing for controlled external access\n- Provides a separate DNS configuration\n- Implements IP forwarding with proper firewall rules\n- Allows running commands inside the isolated network using `run_in_network()`\n\nWhen network isolation is enabled, all traffic from the environment is routed through the configured interfaces, completely separating it from the host network while still allowing controlled access to external resources.",
          "navigation": {
            "parent": "features",
            "next": "vm-isolation"
          }
        },
        {
          "title": "VM Isolation",
          "id": "vm-isolation",
          "content": "VM isolation provides complete isolation using lightweight virtual machines. This is useful for testing code that requires full system isolation.\n\n**Usage**: `safespace --vm [--memory <size>] [--cpus <count>] [--disk <size>]`\n\n**Implementation Details**:\n- Uses QEMU/KVM for hardware-accelerated virtualization\n- Automatically downloads and verifies Alpine Linux for the VM\n- Creates a QCOW2 disk image with configurable size\n- Configures virtual network interfaces for connectivity\n- Provides monitor socket for VM control\n- Generates control scripts for managing the VM\n- Supports both headless and console modes\n- Implements proper VM lifecycle management\n\nVMs provide the strongest isolation by running code in a completely separate operating system, with controlled resource allocation and network access.",
          "parameters": {
            "memory": "Memory size for the VM (e.g., '2G') - Controls RAM allocation",
            "cpus": "Number of CPUs for the VM - Sets vCPU count",
            "disk": "Disk size for the VM (e.g., '20G') - Sets virtual disk size"
          },
          "navigation": {
            "previous": "network-isolation",
            "parent": "features",
            "next": "container-isolation"
          }
        },
        {
          "title": "Container Isolation",
          "id": "container-isolation",
          "content": "Container isolation provides lightweight isolation using Docker or Podman containers. This is useful for testing code that requires isolation but doesn't need a full VM.\n\n**Implementation Details**:\n- Automatically detects and uses Docker or Podman\n- Pulls container images with integrity verification\n- Creates container with configurable resource limits\n- Supports volume mounting for workspace access\n- Configures networking with optional isolation\n- Provides scripts for container management\n- Implements `run_in_container()` for executing commands\n- Handles container lifecycle with proper cleanup\n\nContainers offer a middle ground between full VMs and simple process isolation, providing good isolation with minimal resource overhead.",
          "navigation": {
            "previous": "vm-isolation",
            "parent": "features",
            "next": "comprehensive-testing"
          }
        },
        {
          "title": "Comprehensive Testing",
          "id": "comprehensive-testing",
          "content": "Comprehensive testing provides a complete testing environment with various testing tools and configurations.\n\n**Usage**: `safespace --test`\n\n**Implementation Details**:\n- Configures pytest with comprehensive plugins:\n  - pytest-cov for code coverage analysis\n  - pytest-benchmark for performance testing\n  - pytest-xdist for parallel test execution\n  - pytest-timeout for handling test timeouts\n- Sets up code quality tools:\n  - black for code formatting\n  - isort for import sorting\n  - mypy for static type checking\n  - flake8 and pylint for code analysis\n  - bandit for security testing\n- Configures pre-commit hooks for automated checks\n- Creates a setup.cfg with optimized settings\n- Provides test runner scripts for different scenarios\n- Configures coverage reporting formats\n- Sets up benchmark storage and comparison\n\nThe comprehensive testing features ensure your tests are run consistently with proper configuration for all testing tools.",
          "navigation": {
            "previous": "container-isolation",
            "parent": "features",
            "next": "enhanced-development"
          }
        },
        {
          "title": "Enhanced Development Environment",
          "id": "enhanced-development",
          "content": "The enhanced development environment provides additional tools and configurations for development, such as IDE support, Git hooks, and CI/CD configurations.\n\n**Usage**: `safespace --enhanced`\n\n**Implementation Details**:\n- Configures VS Code settings:\n  - Editor configurations for Python development\n  - Debug configurations for various scenarios\n  - Extension recommendations for Python development\n  - Task definitions for common operations\n- Sets up Git hooks with pre-commit configuration\n- Configures GitHub Actions for CI/CD:\n  - Test workflow for multiple Python versions\n  - Code quality checks workflow\n  - Security scanning workflow\n  - Release automation workflow\n- Creates development utility scripts:\n  - setup_dev.sh for environment setup\n  - update_deps.sh for dependency management\n  - lint.sh for running all linters\n  - format.sh for code formatting\n- Configures dependency management with requirements files\n- Sets up project structure following best practices\n\nThe enhanced development environment streamlines the development process with integrated tools and consistent configurations.",
          "navigation": {
            "previous": "comprehensive-testing",
            "parent": "features",
            "next": "commands"
          }
        },
        {
          "title": "Health Monitoring",
          "id": "health-monitoring",
          "content": "SafeSpace includes comprehensive health monitoring for environments to ensure they remain stable and secure.\n\n**Implementation Details**:\n- Monitors directory permissions to detect security issues\n- Checks available disk space with configurable thresholds\n- Verifies subdirectory existence and integrity\n- Monitors resource usage within containers and VMs\n- Checks for process leakage across isolation boundaries\n- Performs periodic garbage collection for resources\n- Provides health status reports with detailed diagnostics\n- Implements automatic recovery for common issues\n\nHealth monitoring ensures the environment remains in a good state throughout its lifecycle.",
          "navigation": {
            "previous": "enhanced-development",
            "parent": "features",
            "next": "commands"
          }
        }
      ],
      "navigation": {
        "previous": "templates",
        "next": "commands"
      }
    },
    {
      "title": "Commands",
      "id": "commands",
      "content": "SafeSpace provides various commands for creating and managing environments. The command-line interface is implemented using the Click library for flexible and intuitive command structure.",
      "subsections": [
        {
          "title": "Main Command",
          "id": "main-command",
          "content": "The main command creates and configures an environment based on the provided options.\n\n**Usage**: `safespace [options]`\n\n**Implementation Details**:\n- Parses command-line arguments using Click\n- Creates a SafeEnvironment instance\n- Configures the environment based on provided options\n- Runs health checks to verify environment integrity\n- Sets up requested features (network, VM, testing, etc.)\n- Provides comprehensive status output\n- Handles proper cleanup on exit\n- Manages sudo password handling for privileged operations\n\n**Options**:\n- `-n, --network`: Enable network isolation using Linux network namespaces\n- `-v, --vm`: Enable VM mode using QEMU/KVM virtualization\n- `-c, --cleanup`: Clean up environment (for internal mode)\n- `--test`: Enable comprehensive testing mode with testing tools\n- `--enhanced`: Enable enhanced development environment with IDE integration\n- `--memory`: Specify VM memory size (e.g., '2G')\n- `--cpus`: Specify number of CPUs for VM\n- `--disk`: Specify VM disk size (e.g., '20G')\n- `--debug`: Enable debug logging for troubleshooting\n- `--wordspace`: Show comprehensive documentation\n- `--wordspace-section <section>`: Show specific documentation section\n- `--wordspace-tree`: Show documentation in tree view\n- `--version`: Show version and exit",
          "navigation": {
            "parent": "commands",
            "next": "internal-command"
          }
        },
        {
          "title": "Internal Command",
          "id": "internal-command",
          "content": "The internal command creates or manages an internal testing environment. Internal environments are persistent and reside in the current working directory.\n\n**Usage**: `safespace internal [options]`\n\n**Implementation Details**:\n- Creates an environment in internal mode\n- Sets up the environment in the `.internal` directory\n- Creates example configuration files and tests\n- Configures a Python test environment with fixtures\n- Sets up directory structure for testing\n- Provides cleanup functionality for maintenance\n\nInternal environments are useful for persistent development and testing within a project directory.\n\n**Options**:\n- `-c, --cleanup`: Clean up the internal environment without removing it completely",
          "navigation": {
            "previous": "main-command",
            "parent": "commands",
            "next": "foreclose-command"
          }
        },
        {
          "title": "Foreclose Command",
          "id": "foreclose-command",
          "content": "The foreclose command completely removes an environment and all backups. This is a destructive operation that cannot be undone.\n\n**Usage**: `safespace foreclose`\n\n**Implementation Details**:\n- Confirms the operation with the user to prevent accidental data loss\n- Removes the environment directory and all its contents\n- Finds and removes all backup directories\n- Removes any orphaned resources (processes, network interfaces, etc.)\n- Performs complete cleanup of all associated resources\n\nThis command will remove the environment directory and all backup directories, as well as any associated files. The operation cannot be undone.",
          "navigation": {
            "previous": "internal-command",
            "parent": "commands",
            "next": "vm-commands"
          }
        },
        {
          "title": "VM Management Commands",
          "id": "vm-commands",
          "content": "SafeSpace provides several commands for managing VMs in the environment.\n\n**Usage**:\n- Start VM: `safespace --vm --start`\n- Stop VM: `safespace --vm --stop`\n- Check VM status: `safespace --vm --status`\n- Connect to VM console: `safespace --vm --console`\n\n**Implementation Details**:\n- VM operations are handled by the VMManager class\n- Start command initializes and boots the VM\n- Stop command gracefully shuts down the VM\n- Status command checks if the VM is running\n- Console command connects to the VM's console interface\n- All commands work with VM configuration from environment\n\nThese commands provide full lifecycle management for the virtual machines in the environment.",
          "navigation": {
            "previous": "foreclose-command",
            "parent": "commands",
            "next": "container-commands"
          }
        },
        {
          "title": "Container Management Commands",
          "id": "container-commands",
          "content": "SafeSpace provides commands for managing containers in the environment.\n\n**Usage**:\n- Start container: `safespace --container --start`\n- Stop container: `safespace --container --stop`\n- Execute in container: `safespace --container --exec <command>`\n- Check container status: `safespace --container --status`\n\n**Implementation Details**:\n- Container operations are handled by the ContainerManager class\n- Start command creates and starts the container\n- Stop command stops the running container\n- Exec command runs a command inside the container\n- Status command checks if the container is running\n- Commands work with Docker or Podman depending on availability\n\nThese commands allow full control over containers created in the environment.",
          "navigation": {
            "previous": "vm-commands",
            "parent": "commands",
            "next": "environment-management"
          }
        }
      ],
      "navigation": {
        "previous": "features",
        "next": "environment-management"
      }
    },
    {
      "title": "Environment Management",
      "id": "environment-management",
      "content": "SafeSpace provides various methods for managing environments. The SafeEnvironment class is the core component that handles environment creation, configuration, and lifecycle management.",
      "subsections": [
        {
          "title": "Creating Environments",
          "id": "creating-environments",
          "content": "Environments can be created using the CLI or the API. When creating an environment, you can specify various options like network isolation, VM mode, and testing mode.\n\n**CLI**:\n```bash\nsafespace [options]\n```\n\n**API**:\n```python\nfrom safespace.environment import SafeEnvironment\n\n# Create with default settings (temporary directory)\nenv = SafeEnvironment()\nenv.create()\n\n# Create with custom directory\nfrom pathlib import Path\nenv = SafeEnvironment(root_dir=Path(\"/path/to/environment\"))\nenv.create()\n\n# Create with sudo password for privileged operations\nenv = SafeEnvironment(sudo_password=\"your_password\")\nenv.create()\n```\n\n**Implementation Details**:\n- Creates secure directories with proper permissions (0o700)\n- Generates a unique timestamp-based name for the environment\n- Sets up standard directory structure (cache, logs, data, tmp)\n- Creates an environment variables file (.env)\n- Verifies directory security and permissions\n- Returns True if creation succeeds, False otherwise",
          "navigation": {
            "parent": "environment-management",
            "next": "using-templates"
          }
        },
        {
          "title": "Using Templates",
          "id": "using-templates",
          "content": "Templates provide predefined configurations for common testing scenarios. You can create an environment from a template using the API.\n\n**API**:\n```python\nfrom safespace.templates import create_from_template\n\n# Create using basic template\nenv = create_from_template('basic')\n\n# Create using VM template with custom settings\nenv = create_from_template(\n    'vm',\n    memory=\"4G\",\n    cpus=4,\n    disk_size=\"20G\",\n    headless=True\n)\n\n# Create using container template with custom settings\nenv = create_from_template(\n    'container',\n    image=\"python:3.11-alpine\",\n    memory=\"1g\",\n    cpus=2.0,\n    mount_workspace=True\n)\n```\n\n**Implementation Details**:\n- Templates are implemented as classes that inherit from EnvironmentTemplate\n- Each template has a unique ID registered in TEMPLATE_REGISTRY\n- Templates override the _configure method to implement specific setups\n- create_from_template retrieves the template class from the registry\n- Parameters are passed to the template constructor\n- The template.create() method instantiates and configures the environment",
          "navigation": {
            "previous": "creating-environments",
            "parent": "environment-management",
            "next": "configuring-environments"
          }
        },
        {
          "title": "Configuring Environments",
          "id": "configuring-environments",
          "content": "SafeSpace environments can be configured with various features after creation.\n\n**API**:\n```python\n# Create environment\nenv = SafeEnvironment()\nenv.create()\n\n# Configure network isolation\nenv.setup_network_isolation()\n\n# Configure VM\nenv.setup_vm(memory=\"2G\", cpus=2, disk_size=\"10G\", headless=True)\n\n# Configure container\nenv.setup_container(\n    image=\"alpine:latest\",\n    memory=\"512m\",\n    cpus=1.0,\n    storage_size=\"5G\",\n    network_enabled=True\n)\n\n# Configure comprehensive testing\nenv.setup_comprehensive_testing()\n\n# Configure enhanced development environment\nenv.setup_enhanced_environment()\n```\n\n**Implementation Details**:\n- Each setup method configures a specific aspect of the environment\n- Methods return True if configuration succeeds, False otherwise\n- Configuration is tracked in environment variables file\n- Setup can be done incrementally, adding features as needed\n- Configuration is validated to ensure compatibility\n- Resources are properly initialized and configured",
          "navigation": {
            "previous": "using-templates",
            "parent": "environment-management",
            "next": "running-in-environments"
          }
        },
        {
          "title": "Running Commands in Environments",
          "id": "running-in-environments",
          "content": "SafeSpace allows you to run commands within the isolated environment.\n\n**API**:\n```python\n# Run in network namespace\nrc, stdout, stderr = env.run_in_network([\"ping\", \"-c\", \"1\", \"8.8.8.8\"])\n\n# Run in container\nrc, stdout, stderr = env.run_in_container([\"ls\", \"-la\"])\n```\n\n**Implementation Details**:\n- Commands are run in the appropriate isolation context\n- For network isolation, commands run in the Linux network namespace\n- For container isolation, commands run inside the container\n- Command output is captured and returned as stdout/stderr\n- Return code indicates command success or failure\n- The environment handles all the complexity of executing in isolation",
          "navigation": {
            "previous": "configuring-environments",
            "parent": "environment-management",
            "next": "managing-resources"
          }
        },
        {
          "title": "Managing Resources",
          "id": "managing-resources",
          "content": "SafeSpace provides tools for managing resources in the environment.\n\n**API**:\n```python\n# Check environment health\nhealthy, issues = env.check_health()\n\n# Clean cache files\nenv.clean_cache()\n\n# Perform garbage collection\nenv.perform_gc()\n\n# Start/stop VM\nenv.start_vm()\nenv.stop_vm()\nenv.is_vm_running()\n\n# Start/stop container\nenv.start_container()\nenv.stop_container()\nenv.is_container_running()\n```\n\n**Implementation Details**:\n- Resource management functions maintain environment health\n- Health checks verify directory permissions, space, and integrity\n- Cache cleaning removes temporary files while preserving important data\n- Garbage collection removes old logs and unused resources\n- VM and container lifecycle methods provide clean start/stop operations\n- Resource status methods provide current state information",
          "navigation": {
            "previous": "running-in-environments",
            "parent": "environment-management",
            "next": "cleaning-up-environments"
          }
        },
        {
          "title": "Cleaning Up Environments",
          "id": "cleaning-up-environments",
          "content": "Environments can be cleaned up using the CLI or the API. When cleaning up an environment, all resources are released and the environment directory is removed.\n\n**CLI**:\n```bash\nsafespace -c\n```\n\n**API**:\n```python\n# Standard cleanup (removes directory for temporary environments)\nenv.cleanup()\n\n# Cleanup without removing directory\nenv.cleanup(keep_dir=True)\n\n# Cleanup internal environment\nenv.cleanup_internal()\n\n# Complete removal including backups\nenv.foreclose()\n```\n\n**Implementation Details**:\n- Cleanup releases all resources in reverse order of creation\n- For network isolation, namespaces and interfaces are removed\n- For VM isolation, VM is stopped and disk image removed\n- For container isolation, container is stopped and removed\n- Processes using the environment directory are identified and terminated\n- Directory removal is handled with proper permissions\n- Internal mode preserves the directory unless explicitly requested\n- Foreclose performs complete removal including all backup directories",
          "navigation": {
            "previous": "managing-resources",
            "parent": "environment-management",
            "next": "advanced-usage"
          }
        }
      ],
      "navigation": {
        "previous": "commands",
        "next": "advanced-usage"
      }
    },
    {
      "title": "Advanced Usage",
      "id": "advanced-usage",
      "content": "SafeSpace provides various advanced features for specific use cases. These features allow for deeper customization and integration with existing workflows.",
      "subsections": [
        {
          "title": "Custom Templates",
          "id": "custom-templates",
          "content": "You can create custom templates by extending the `EnvironmentTemplate` class. This allows you to define your own environment configuration for specific testing scenarios.\n\n**Example**:\n```python\nfrom safespace.templates import EnvironmentTemplate\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass MyTemplate(EnvironmentTemplate):\n    name = \"my_template\"\n    description = \"My custom template for testing API services\"\n    \n    def __init__(self, \n                root_dir=None, \n                internal_mode=False,\n                sudo_password=None,\n                api_key=None,\n                service_url=None) -> None:\n        super().__init__(root_dir, internal_mode, sudo_password)\n        self.api_key = api_key\n        self.service_url = service_url\n    \n    def _configure(self) -> None:\n        # Set up network isolation\n        if not self.env.setup_network_isolation():\n            logger.warning(\"Failed to set up network isolation\")\n        \n        # Set up container\n        if not self.env.setup_container(\n            image=\"python:3.11-alpine\",\n            network_enabled=True\n        ):\n            logger.warning(\"Failed to set up container\")\n        \n        # Set up testing\n        if not self.env.setup_comprehensive_testing():\n            logger.warning(\"Failed to set up comprehensive testing\")\n        \n        # Create API configuration file\n        if self.api_key and self.service_url:\n            config_dir = self.env.root_dir / \"config\"\n            config_dir.mkdir(exist_ok=True)\n            \n            with open(config_dir / \"api_config.json\", \"w\") as f:\n                import json\n                json.dump({\n                    \"api_key\": self.api_key,\n                    \"service_url\": self.service_url\n                }, f, indent=2)\n\n# Register the template\nfrom safespace.templates import TEMPLATE_REGISTRY\nTEMPLATE_REGISTRY[\"my_api_test\"] = MyTemplate\n\n# Use the template\nfrom safespace.templates import create_from_template\nenv = create_from_template(\n    \"my_api_test\",\n    api_key=\"your_api_key\",\n    service_url=\"https://api.example.com\"\n)\n```\n\n**Implementation Details**:\n- Extend the EnvironmentTemplate base class\n- Define name and description class attributes\n- Override __init__ to accept custom parameters\n- Override _configure to implement custom configuration\n- Register the template in TEMPLATE_REGISTRY\n- Use create_from_template with custom parameters",
          "navigation": {
            "parent": "advanced-usage",
            "next": "ci-cd-integration"
          }
        },
        {
          "title": "Integration with CI/CD",
          "id": "ci-cd-integration",
          "content": "SafeSpace can be integrated with CI/CD pipelines to provide isolated testing environments. This can be done by using the SafeSpace API in your CI/CD scripts or by using the CLI in your pipeline configuration.\n\n**Example GitHub Actions workflow**:\n```yaml\nname: Test\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install safespace\n          pip install -r requirements-dev.txt\n      - name: Run tests in SafeSpace environment\n        run: |\n          # Create environment with network isolation and testing enabled\n          python -c \"from safespace.templates import create_from_template; env = create_from_template('network'); print(env.root_dir)\"\n          # Run tests in the isolated environment\n          safespace --network --test -- python -m pytest tests/ -v\n```\n\n**Example CircleCI configuration**:\n```yaml\nversion: 2.1\njobs:\n  test:\n    docker:\n      - image: cimg/python:3.11\n    steps:\n      - checkout\n      - run:\n          name: Install dependencies\n          command: |\n            python -m pip install --upgrade pip\n            pip install safespace\n            pip install -r requirements-dev.txt\n      - run:\n          name: Run tests in isolated environment\n          command: |\n            safespace --network --test -- python -m pytest tests/ -v\n```\n\n**Implementation Details**:\n- Install SafeSpace in your CI/CD environment\n- Create an isolated environment using templates or direct API\n- Run tests inside the isolated environment\n- Use `--` to pass commands to be run in isolation\n- Environment is automatically cleaned up after tests\n- Test results and logs are available in CI/CD output",
          "navigation": {
            "previous": "custom-templates",
            "parent": "advanced-usage",
            "next": "network-configuration"
          }
        },
        {
          "title": "Network Configuration",
          "id": "network-configuration",
          "content": "Network isolation in SafeSpace creates a separate network namespace with controlled access to the host network. This allows for testing network-related code without affecting the host system.\n\n**Advanced network configuration**:\n```python\nfrom safespace.environment import SafeEnvironment\nfrom safespace.network import NetworkIsolation\n\n# Create environment\nenv = SafeEnvironment(sudo_password=\"your_password\")\nenv.create()\n\n# Create custom network isolation\nnetwork = NetworkIsolation(\n    root_dir=env.root_dir,\n    sudo_password=\"your_password\",\n    namespace_name=\"custom_net\",\n    host_interface=\"eth0\",\n    veth_prefix=\"safenet\",\n    subnet=\"192.168.200.0/24\",\n    dns_servers=[\"8.8.8.8\", \"1.1.1.1\"]\n)\n\n# Set up the network\nnetwork.setup()\n\n# Run commands in the network namespace\nrc, stdout, stderr = network.run_command([\"ip\", \"addr\"])\nprint(stdout)\n\n# Clean up when done\nnetwork.cleanup()\nenv.cleanup()\n```\n\n**Implementation Details**:\n- Network isolation creates a Linux network namespace\n- A pair of virtual Ethernet interfaces connects host and namespace\n- NAT routing allows controlled access to external networks\n- Custom subnet can be configured for the namespace\n- DNS servers can be specified for name resolution\n- Network cleanup removes all created interfaces and namespaces",
          "navigation": {
            "previous": "ci-cd-integration",
            "parent": "advanced-usage",
            "next": "vm-configuration"
          }
        },
        {
          "title": "VM Configuration",
          "id": "vm-configuration",
          "content": "SafeSpace allows detailed configuration of virtual machines for specific testing scenarios.\n\n**Advanced VM configuration**:\n```python\nfrom safespace.environment import SafeEnvironment\nfrom safespace.vm import VMManager, VMConfig\n\n# Create environment\nenv = SafeEnvironment(sudo_password=\"your_password\")\nenv.create()\n\n# Create custom VM configuration\nvm_config = VMConfig(\n    memory=\"4G\",\n    cpus=4,\n    disk_size=\"20G\",\n    iso_url=\"https://dl-cdn.alpinelinux.org/alpine/v3.19.1/releases/x86_64/alpine-virt-3.19.1-x86_64.iso\",\n    iso_sha256_url=\"https://dl-cdn.alpinelinux.org/alpine/v3.19.1/releases/x86_64/alpine-virt-3.19.1-x86_64.iso.sha256\",\n    mac_address=\"52:54:00:12:34:56\",\n    use_network=True,\n    use_kvm=True,\n    headless=True\n)\n\n# Create VM manager\nvm_manager = VMManager(\n    env_dir=env.root_dir,\n    sudo_password=\"your_password\",\n    config=vm_config\n)\n\n# Set up VM\nvm_manager.setup()\n\n# Start VM\nvm_manager.start()\n\n# Check VM status\nif vm_manager.is_running():\n    print(\"VM is running\")\n\n# Stop VM\nvm_manager.stop()\n\n# Clean up when done\nvm_manager.cleanup()\nenv.cleanup()\n```\n\n**Implementation Details**:\n- VM configuration allows detailed customization\n- Custom ISO images can be specified\n- SHA256 verification ensures image integrity\n- MAC address can be specified for network consistency\n- KVM acceleration can be enabled or disabled\n- Headless mode allows running without a display\n- Monitor socket enables advanced VM control",
          "navigation": {
            "previous": "network-configuration",
            "parent": "advanced-usage",
            "next": "container-configuration"
          }
        },
        {
          "title": "Container Configuration",
          "id": "container-configuration",
          "content": "SafeSpace provides detailed container configuration options for specific testing scenarios.\n\n**Advanced container configuration**:\n```python\nfrom safespace.environment import SafeEnvironment\nfrom safespace.container import ContainerManager, ContainerConfig\n\n# Create environment\nenv = SafeEnvironment(sudo_password=\"your_password\")\nenv.create()\n\n# Create custom container configuration\ncontainer_config = ContainerConfig(\n    image=\"python:3.11-alpine\",\n    memory=\"2g\",\n    cpus=2.0,\n    storage_size=\"10G\",\n    network_enabled=True,\n    privileged=False,\n    mount_workspace=True\n)\n\n# Create container manager\ncontainer_manager = ContainerManager(\n    env_dir=env.root_dir,\n    sudo_password=\"your_password\",\n    config=container_config\n)\n\n# Set up container\ncontainer_manager.setup()\n\n# Start container\ncontainer_manager.start()\n\n# Run commands in container\nrc, stdout, stderr = container_manager.run_command([\"python\", \"-c\", \"print('Hello from container')\"])\nprint(stdout)\n\n# Stop container\ncontainer_manager.stop()\n\n# Clean up when done\ncontainer_manager.cleanup()\nenv.cleanup()\n```\n\n**Implementation Details**:\n- Container configuration allows detailed customization\n- Memory limits prevent container from using too much RAM\n- CPU limits control processor usage\n- Storage size limits prevent disk space issues\n- Network can be enabled or disabled\n- Privileged mode can be enabled for advanced use cases\n- Workspace mounting provides access to project files",
          "navigation": {
            "previous": "vm-configuration",
            "parent": "advanced-usage",
            "next": "troubleshooting"
          }
        }
      ],
      "navigation": {
        "previous": "environment-management",
        "next": "troubleshooting"
      }
    },
    {
      "title": "Troubleshooting",
      "id": "troubleshooting",
      "content": "Common issues and solutions when using SafeSpace. This section provides detailed troubleshooting guides for various aspects of the SafeSpace environment.",
      "subsections": [
        {
          "title": "Permission Issues",
          "id": "permission-issues",
          "content": "Permission issues can occur when SafeSpace operations require elevated privileges, especially for network and VM operations.\n\n**Symptoms**:\n- Error messages containing \"Permission denied\"\n- Network or VM setup failing with access errors\n- Unable to create network namespaces or interfaces\n- Unable to start VM or create tap interfaces\n\n**Solutions**:\n\n1. Provide sudo password when creating the environment:\n```python\nfrom safespace.environment import SafeEnvironment\nenv = SafeEnvironment(sudo_password=\"your_password\")\n```\n\n2. Set the `SUDO_PASSWORD` environment variable:\n```bash\nexport SUDO_PASSWORD=\"your_password\"\nsafespace --network --vm\n```\n\n3. Check your user's sudo privileges:\n```bash\nsudo -l\n```\n\n4. For network operations on Linux, ensure your user has the necessary capabilities:\n```bash\nsudo setcap cap_net_admin+ep $(which python3)\n```\n\n5. For container operations, ensure your user is in the docker group:\n```bash\nsudo usermod -aG docker $USER\n# Log out and log back in for changes to take effect\n```\n\n**Technical Details**:\n- Network isolation uses Linux network namespaces which require CAP_NET_ADMIN capability\n- VM operations often require access to /dev/kvm and other system resources\n- The SafeEnvironment class uses `sudo_command()` from utils.py to run privileged commands\n- Password is required only for operations needing elevated privileges, not for basic operations",
          "navigation": {
            "parent": "troubleshooting",
            "next": "vm-issues"
          }
        },
        {
          "title": "VM Issues",
          "id": "vm-issues",
          "content": "VM-related issues can occur due to missing dependencies, hardware limitations, or configuration problems.\n\n**Symptoms**:\n- VM setup fails with error messages\n- Cannot start VM or VM crashes shortly after start\n- Error messages about KVM or QEMU\n- Missing device errors\n\n**Solutions**:\n\n1. Ensure QEMU/KVM is installed and working:\n\n   **For Ubuntu/Debian**:\n   ```bash\n   sudo apt-get update\n   sudo apt-get install qemu-kvm libvirt-daemon-system\n   ```\n\n   **For Fedora/RHEL/CentOS**:\n   ```bash\n   sudo dnf install qemu-kvm libvirt\n   ```\n\n   **For macOS** (using Homebrew):\n   ```bash\n   brew install qemu\n   ```\n\n2. Ensure your user is in the kvm group (Linux):\n   ```bash\n   sudo usermod -aG kvm $USER\n   # Log out and log back in for changes to take effect\n   ```\n\n3. Verify KVM acceleration is available:\n   ```bash\n   kvm-ok\n   # Or check directly\n   ls -l /dev/kvm\n   ```\n\n4. If KVM is not available, disable it in VM configuration:\n   ```python\n   env.setup_vm(use_kvm=False)\n   ```\n\n5. Check for sufficient resources:\n   ```bash\n   free -h  # Check available memory\n   df -h    # Check available disk space\n   ```\n\n6. Debug VM setup and startup:\n   ```python\n   import logging\n   logging.basicConfig(level=logging.DEBUG)\n   ```\n\n**Technical Details**:\n- The VMManager class in vm.py handles VM lifecycle and configuration\n- VM setup checks for required tools like qemu-img and qemu-system-x86_64\n- Alpine Linux is downloaded and verified for integrity during setup\n- VM monitoring socket allows controlling the VM after startup\n- The VM PID file tracks the running VM process",
          "navigation": {
            "previous": "permission-issues",
            "parent": "troubleshooting",
            "next": "container-issues"
          }
        },
        {
          "title": "Container Issues",
          "id": "container-issues",
          "content": "Container-related issues can occur due to Docker/Podman configuration, permissions, or resource constraints.\n\n**Symptoms**:\n- Container setup fails with error messages\n- Unable to pull container images\n- Container starts but exits immediately\n- Network connectivity issues from container\n\n**Solutions**:\n\n1. Ensure Docker or Podman is installed and running:\n\n   **For Docker**:\n   ```bash\n   docker --version\n   sudo systemctl status docker\n   sudo systemctl start docker\n   ```\n\n   **For Podman**:\n   ```bash\n   podman --version\n   podman system info\n   ```\n\n2. Ensure your user has permission to use Docker:\n   ```bash\n   sudo usermod -aG docker $USER\n   # Log out and log back in for changes to take effect\n   ```\n\n3. Test basic container functionality:\n   ```bash\n   docker run hello-world\n   # Or for Podman\n   podman run hello-world\n   ```\n\n4. Check container logs for errors:\n   ```python\n   from safespace.environment import SafeEnvironment\n   env = SafeEnvironment()\n   env.create()\n   env.setup_container()\n   env.start_container()\n   # Check container runtime logs\n   import subprocess\n   subprocess.run([\"docker\", \"logs\", env.container_manager.container_name])\n   ```\n\n5. Verify network connectivity:\n   ```bash\n   docker network ls\n   # Or for Podman\n   podman network ls\n   ```\n\n**Technical Details**:\n- The ContainerManager class in container.py handles container lifecycle\n- Container setup automatically detects Docker or Podman availability\n- Container startup generates configuration files and scripts\n- Container execution uses the runtime's exec command",
          "navigation": {
            "previous": "vm-issues",
            "parent": "troubleshooting",
            "next": "network-isolation-issues"
          }
        },
        {
          "title": "Network Isolation Issues",
          "id": "network-isolation-issues",
          "content": "Network isolation issues can occur due to system configuration, permissions, or conflicts with existing network setups.\n\n**Symptoms**:\n- Network isolation setup fails with error messages\n- Cannot create network namespaces or interfaces\n- No network connectivity from isolated environment\n- DNS resolution failures in isolated environment\n\n**Solutions**:\n\n1. Ensure you have sudo privileges for network operations:\n   ```bash\n   # Provide sudo password when creating environment\n   safespace --network --sudo-password\n   ```\n\n2. Check if network namespaces are supported:\n   ```bash\n   ip netns list\n   # If this command fails, your kernel may not support namespaces\n   ```\n\n3. Verify no conflicting network interfaces:\n   ```bash\n   ip link show\n   # Look for veth pairs or tap interfaces that might conflict\n   ```\n\n4. Test basic network namespace functionality:\n   ```bash\n   sudo ip netns add test_ns\n   sudo ip netns exec test_ns ip addr\n   sudo ip netns delete test_ns\n   ```\n\n5. Ensure firewall rules allow NAT forwarding:\n   ```bash\n   sudo iptables -t nat -L\n   # Should see masquerade rules for the isolated network\n   ```\n\n6. Debug network setup with enhanced logging:\n   ```python\n   import logging\n   logging.basicConfig(level=logging.DEBUG)\n   ```\n\n**Technical Details**:\n- The NetworkIsolation class in network.py handles network namespace setup\n- Network setup creates virtual Ethernet pairs (veth) for connectivity\n- NAT rules are added to allow external network access\n- DNS configuration is set up in the namespace for name resolution\n- Network cleanup removes interfaces and namespaces",
          "navigation": {
            "previous": "container-issues",
            "parent": "troubleshooting",
            "next": "resource-issues"
          }
        },
        {
          "title": "Resource Management Issues",
          "id": "resource-issues",
          "content": "Resource management issues can occur due to insufficient system resources, misconfiguration, or resource leaks.\n\n**Symptoms**:\n- Out of disk space errors\n- Memory allocation failures\n- CPU overutilization\n- Environment health check failures\n\n**Solutions**:\n\n1. Check available disk space:\n   ```bash\n   df -h\n   # Ensure sufficient space in the environment directory\n   ```\n\n2. Monitor memory usage:\n   ```bash\n   free -h\n   # Ensure sufficient memory for VM and container operations\n   ```\n\n3. Adjust resource limits:\n   ```python\n   # Reduce VM memory allocation\n   env.setup_vm(memory=\"512M\", cpus=1)\n   \n   # Reduce container resource allocation\n   env.setup_container(memory=\"256m\", cpus=0.5)\n   ```\n\n4. Clean up unused resources:\n   ```python\n   # Clean cache and temporary files\n   env.clean_cache()\n   \n   # Perform garbage collection\n   env.perform_gc()\n   ```\n\n5. Check for resource leaks:\n   ```bash\n   # Check for orphaned processes\n   ps aux | grep safespace\n   \n   # Check for orphaned network namespaces\n   sudo ip netns list\n   ```\n\n6. Run health checks:\n   ```python\n   healthy, issues = env.check_health()\n   if not healthy:\n       print(\"Health issues:\", issues)\n   ```\n\n**Technical Details**:\n- The ResourceManager class in resource_manager.py handles resource allocation\n- Environment health checks verify directory permissions and available space\n- Garbage collection removes old log files and temporary data\n- Cache management prevents unbounded cache growth\n- Resource leaks are prevented by comprehensive cleanup procedures",
          "navigation": {
            "previous": "network-isolation-issues",
            "parent": "troubleshooting",
            "next": "debugging"
          }
        },
        {
          "title": "Debugging SafeSpace",
          "id": "debugging",
          "content": "SafeSpace provides various debugging tools and techniques to help diagnose and resolve issues.\n\n**Debug Logging**:\n\n1. Enable debug logging with the CLI:\n   ```bash\n   safespace --debug --network --test\n   ```\n\n2. Enable debug logging programmatically:\n   ```python\n   import logging\n   logging.basicConfig(level=logging.DEBUG)\n   ```\n\n3. Log to a file for persistent debugging:\n   ```python\n   import logging\n   logging.basicConfig(\n       level=logging.DEBUG,\n       filename=\"safespace_debug.log\",\n       format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n   )\n   ```\n\n**Health Checks**:\n\n```python\nfrom safespace.environment import SafeEnvironment\nenv = SafeEnvironment()\nenv.create()\n\n# Run health check\nhealthy, issues = env.check_health()\nif not healthy:\n    print(\"Health issues:\", issues)\n```\n\n**Inspecting Environment**:\n\n```python\n# Print environment directory structure\nfrom pathlib import Path\nimport subprocess\n\nenv_dir = env.root_dir\nresult = subprocess.run([\"find\", str(env_dir), \"-type\", \"f\"], capture_output=True, text=True)\nprint(result.stdout)\n\n# Examine environment variables file\nwith open(env_dir / \".env\", \"r\") as f:\n    print(f.read())\n```\n\n**Network Debugging**:\n\n```python\n# Check network namespaces\nrc, stdout, stderr = env.run_in_network([\"ip\", \"addr\"])\nprint(stdout)\n\n# Test connectivity\nrc, stdout, stderr = env.run_in_network([\"ping\", \"-c\", \"1\", \"8.8.8.8\"])\nprint(stdout)\n```\n\n**VM Debugging**:\n\n```python\n# Check VM status\nif env.is_vm_running():\n    print(\"VM is running\")\nelse:\n    print(\"VM is not running\")\n\n# Connect to VM monitor\nimport subprocess\nsubprocess.run([\"socat\", \"-,echo=0,icanon=0\", f\"UNIX-CONNECT:{env.vm_manager.vm_monitor_socket}\"])\n```\n\n**Container Debugging**:\n\n```python\n# Check container status\nif env.is_container_running():\n    print(\"Container is running\")\nelse:\n    print(\"Container is not running\")\n\n# Inspect container\nsubprocess.run([\"docker\", \"inspect\", env.container_manager.container_name])\n```\n\n**Technical Details**:\n- Debug logging uses Python's logging module configured in utils.py\n- Health checks verify the environment's integrity in multiple dimensions\n- Resource monitoring helps diagnose performance and capacity issues\n- Network, VM, and container debugging tools connect directly to these components",
          "navigation": {
            "previous": "resource-issues",
            "parent": "troubleshooting"
          }
        }
      ],
      "navigation": {
        "previous": "advanced-usage"
      }
    }
  ]
} 